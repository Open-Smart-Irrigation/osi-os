[
    {
        "id": "0077890f0352ff63",
        "type": "tab",
        "label": "read sensor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "38bc75bc54561ece",
        "type": "group",
        "z": "0077890f0352ff63",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "68233a96f1377c0c",
            "abda19b6ffedb281",
            "1a7c1e1774d13afe",
            "83d777b8cdc63fbd",
            "ab6a83b4f51d4343"
        ],
        "x": 434,
        "y": 99,
        "w": 1492,
        "h": 142
    },
    {
        "id": "68233a96f1377c0c",
        "type": "mqtt in",
        "z": "0077890f0352ff63",
        "g": "38bc75bc54561ece",
        "name": "KIWI",
        "topic": "application/945c3652-8cdc-44ce-9a5d-eb146d626be2/device/647fda0000007f9b/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "b0b19352dac3fb34",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 510,
        "y": 200,
        "wires": [
            [
                "abda19b6ffedb281"
            ]
        ]
    },
    {
        "id": "abda19b6ffedb281",
        "type": "device event",
        "z": "0077890f0352ff63",
        "g": "38bc75bc54561ece",
        "name": "up",
        "eventType": "up",
        "x": 810,
        "y": 200,
        "wires": [
            [
                "1a7c1e1774d13afe"
            ]
        ]
    },
    {
        "id": "1a7c1e1774d13afe",
        "type": "function",
        "z": "0077890f0352ff63",
        "g": "38bc75bc54561ece",
        "name": "Process Data",
        "func": "function convertHzToKPa(input_frequency) {\n    if (input_frequency > 6430) return 0;\n    if (input_frequency >= 4330 && input_frequency <= 6430) return 9 - (input_frequency - 4330) * 0.004286;\n    if (input_frequency >= 2820 && input_frequency <= 4330) return 15 - (input_frequency - 2820) * 0.003974;\n    if (input_frequency >= 1110 && input_frequency <= 2820) return 35 - (input_frequency - 1110) * 0.01170;\n    if (input_frequency >= 770 && input_frequency <= 1110) return 55 - (input_frequency - 770) * 0.05884;\n    if (input_frequency >= 600 && input_frequency <= 770) return 75 - (input_frequency - 600) * 0.1176;\n    if (input_frequency >= 485 && input_frequency <= 600) return 100 - (input_frequency - 485) * 0.2174;\n    if (input_frequency >= 293 && input_frequency <= 485) return 200 - (input_frequency - 293) * 0.5208;\n    if (input_frequency < 293) return 200;\n    return null;\n}\n\nfunction processAndStore(msg) {\n    try {\n        const data = msg.payload;\n        const now = new Date();\n\n        // Convert both frequency readings to kPa\n        const watermark1 = convertHzToKPa(data.object.input5_frequency);\n        const watermark2 = convertHzToKPa(data.object.input6_frequency);\n\n        // Create formatted data structure\n        const formattedData = {\n            timestamp: now.toISOString(),\n            readings: {\n                input5_frequency: data.object.input5_frequency,\n                watermark1: watermark1,\n                input6_frequency: data.object.input6_frequency,\n                watermark2: watermark2,\n                light_intensity: data.object.light_intensity || null\n            }\n        };\n\n        // Update node status with both moisture readings\n        node.status({\n            fill: \"blue\",\n            shape: \"dot\",\n            text: \"WM1: \" + watermark1.toFixed(2) + \" kPa, WM2: \" + watermark2.toFixed(2) + \" kPa\"\n        });\n\n        msg.formattedData = formattedData;\n        return msg;\n\n    } catch (error) {\n        node.error(\"Error processing message: \" + error.message);\n        return null;\n    }\n}\n\nreturn processAndStore(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 200,
        "wires": [
            [
                "sql-insert-function",
                "ab6a83b4f51d4343"
            ]
        ]
    },
    {
        "id": "sql-insert-function",
        "type": "function",
        "z": "0077890f0352ff63",
        "name": "Build SQL INSERT",
        "func": "const data = msg.formattedData;\nconst readings = data.readings;\nconst timestamp = data.timestamp;\nconst swt_kpa = readings.watermark1 !== undefined ? readings.watermark1 : null;\nconst light_lux = readings.light_intensity !== undefined ? readings.light_intensity : null;\nconst sensor_id = 1; // Set this as needed\nlet columns = ['sensor_id', 'timestamp'];\nlet values = [sensor_id, timestamp];\nif (swt_kpa !== null) { columns.push('swt_kpa'); values.push(swt_kpa); }\nif (light_lux !== null) { columns.push('light_lux'); values.push(light_lux); }\nconst placeholders = values.map(() => '?').join(',');\nconst sql = `INSERT INTO sensor_data (${columns.join(',')}) VALUES (${placeholders})`;\nmsg.topic = sql;\nmsg.payload = values;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 200,
        "wires": [
            [
                "sqlite-node"
            ]
        ]
    },
    {
        "id": "sqlite-node",
        "type": "sqlite",
        "z": "0077890f0352ff63",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Sensor DB Insert",
        "db": "sensor_data.db",
        "x": 1400,
        "y": 200,
        "wires": [
            [
                "83d777b8cdc63fbd"
            ]
        ]
    },
    {
        "id": "83d777b8cdc63fbd",
        "type": "debug",
        "z": "0077890f0352ff63",
        "g": "38bc75bc54561ece",
        "name": "Storage Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 200,
        "wires": []
    },
    {
        "id": "ab6a83b4f51d4343",
        "type": "debug",
        "z": "0077890f0352ff63",
        "g": "38bc75bc54561ece",
        "name": "Moisture Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "formattedData.readings",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 140,
        "wires": []
    },
    {
        "id": "b0b19352dac3fb34",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "0",
        "cleansession": false,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]